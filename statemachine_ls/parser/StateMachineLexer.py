# Generated from StateMachine.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,124,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,4,14,107,8,14,11,14,12,14,108,
        1,14,1,14,1,15,1,15,1,15,5,15,116,8,15,10,15,12,15,119,9,15,1,16,
        1,16,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,0,15,0,17,7,19,
        8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,1,0,3,1,0,97,122,1,0,
        65,90,3,0,9,10,13,13,32,32,125,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,
        7,41,1,0,0,0,9,43,1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,49,1,0,
        0,0,17,51,1,0,0,0,19,64,1,0,0,0,21,70,1,0,0,0,23,86,1,0,0,0,25,89,
        1,0,0,0,27,97,1,0,0,0,29,103,1,0,0,0,31,112,1,0,0,0,33,120,1,0,0,
        0,35,36,5,123,0,0,36,2,1,0,0,0,37,38,5,125,0,0,38,4,1,0,0,0,39,40,
        5,59,0,0,40,6,1,0,0,0,41,42,5,91,0,0,42,8,1,0,0,0,43,44,5,47,0,0,
        44,10,1,0,0,0,45,46,5,93,0,0,46,12,1,0,0,0,47,48,7,0,0,0,48,14,1,
        0,0,0,49,50,7,1,0,0,50,16,1,0,0,0,51,52,5,83,0,0,52,53,5,116,0,0,
        53,54,5,97,0,0,54,55,5,116,0,0,55,56,5,101,0,0,56,57,5,77,0,0,57,
        58,5,97,0,0,58,59,5,99,0,0,59,60,5,104,0,0,60,61,5,105,0,0,61,62,
        5,110,0,0,62,63,5,101,0,0,63,18,1,0,0,0,64,65,5,115,0,0,65,66,5,
        116,0,0,66,67,5,97,0,0,67,68,5,116,0,0,68,69,5,101,0,0,69,20,1,0,
        0,0,70,71,5,99,0,0,71,72,5,111,0,0,72,73,5,109,0,0,73,74,5,112,0,
        0,74,75,5,111,0,0,75,76,5,115,0,0,76,77,5,105,0,0,77,78,5,116,0,
        0,78,79,5,101,0,0,79,80,5,32,0,0,80,81,5,115,0,0,81,82,5,116,0,0,
        82,83,5,97,0,0,83,84,5,116,0,0,84,85,5,101,0,0,85,22,1,0,0,0,86,
        87,5,45,0,0,87,88,5,62,0,0,88,24,1,0,0,0,89,90,5,73,0,0,90,91,5,
        78,0,0,91,92,5,73,0,0,92,93,5,84,0,0,93,94,5,73,0,0,94,95,5,65,0,
        0,95,96,5,76,0,0,96,26,1,0,0,0,97,98,5,70,0,0,98,99,5,73,0,0,99,
        100,5,78,0,0,100,101,5,65,0,0,101,102,5,76,0,0,102,28,1,0,0,0,103,
        106,5,39,0,0,104,107,3,15,7,0,105,107,3,13,6,0,106,104,1,0,0,0,106,
        105,1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
        110,1,0,0,0,110,111,5,39,0,0,111,30,1,0,0,0,112,117,3,15,7,0,113,
        116,3,13,6,0,114,116,3,15,7,0,115,113,1,0,0,0,115,114,1,0,0,0,116,
        119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,32,1,0,0,0,119,117,
        1,0,0,0,120,121,7,2,0,0,121,122,1,0,0,0,122,123,6,16,0,0,123,34,
        1,0,0,0,5,0,106,108,115,117,1,6,0,0
    ]

class StateMachineLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    STATEMACHINE = 7
    STATE = 8
    COMPOSITE_STATE = 9
    TRANSITION_SYMBOL = 10
    INITIAL = 11
    FINAL = 12
    TEXT = 13
    NAME = 14
    WS = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "';'", "'['", "'/'", "']'", "'StateMachine'", 
            "'state'", "'composite state'", "'->'", "'INITIAL'", "'FINAL'" ]

    symbolicNames = [ "<INVALID>",
            "STATEMACHINE", "STATE", "COMPOSITE_STATE", "TRANSITION_SYMBOL", 
            "INITIAL", "FINAL", "TEXT", "NAME", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "LOWERCASE", 
                  "UPPERCASE", "STATEMACHINE", "STATE", "COMPOSITE_STATE", 
                  "TRANSITION_SYMBOL", "INITIAL", "FINAL", "TEXT", "NAME", 
                  "WS" ]

    grammarFileName = "StateMachine.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


